{
    "class": {
        "definition": "A class is a blueprint for creating objects in Java.",
        "example": "public class Dog {\n  String breed;\n  void bark() {\n    System.out.println(\"Woof!\");\n  }\n}"
    },
    "interface": {
        "definition": "An interface is a reference type in Java, similar to a class, that can contain only constants, method signatures, default methods, static methods, and nested types.",
        "example": "interface Animal {\n  void makeSound();\n}"
    },
    "inheritance": {
        "definition": "Inheritance allows one class to inherit the fields and methods of another class.",
        "example": "class Animal {\n  void eat() {\n    System.out.println(\"This animal eats food.\");\n  }\n}\nclass Dog extends Animal {\n  void bark() {\n    System.out.println(\"Woof!\");\n  }\n}"
    },
    "object": {
        "definition": "An object is an instance of a class.",
        "example": "Dog myDog = new Dog();"
    },
    "method": {
        "definition": "A method is a block of code that performs a specific task.",
        "example": "void bark() {\n  System.out.println(\"Woof!\");\n}"
    },
    "constructor": {
        "definition": "A constructor initializes a new object.",
        "example": "public Dog(String breed) {\n  this.breed = breed;\n}"
    },
    "polymorphism": {
        "definition": "Polymorphism allows objects to be treated as instances of their parent class.",
        "example": "Animal a = new Dog();\na.makeSound();"
    },
    "encapsulation": {
        "definition": "Encapsulation hides internal state and requires all interaction to be performed through methods.",
        "example": "private int age;\npublic void setAge(int age) {\n  this.age = age;\n}"
    },
    "abstraction": {
        "definition": "Abstraction hides complex implementation details and shows only essential features.",
        "example": "abstract class Animal {\n  abstract void makeSound();\n}"
    }
}